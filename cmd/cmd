#!/usr/bin/env bash

logfile="/var/tmp/log"
numbers=
now=`date +%s`            #So epoch and human 
date=`date -d @$(($now))` #readable date matches:
backups="/home/daniel/work/bkups/"





if [ ! $1 ]    ;
 then
	 grep "#cmd" `which $0` ;
	 #just looks neater
 elif [ $1 == "1" ] ; then
  ip link delete docker0                    ;  #cmd 1
  echo ip link delete docker
 elif [ $1 == "2" ] ; then
  watch -n 1 grep MHz /proc/cpuinfo         ;  #cmd 2
 elif [ $1 == "3" ] ; then 
  ifconfig -s                               ;  #cmd 3
 elif [ $1 == "4" ] ; then 
  ifconfig -s
  read -p "Interface ?:"  interface         ;        
  horst -i `ifconfig -s | grep $interface | awk ' { print $1 }'` ; #cmd 4
 elif [ $1 == "5" ] ; then 
  inxi -Fxxxza                              ;  #cmd 5
 elif [ $1 == "6" ] ; then 
  journalctl -b0 -p4                        ;  #cmd 6	 
 elif [ $1 == "7" ] ; then
  ifconfig -s                                                        ; 
 read -p "Interface: " interface                                     ; 
  tcpdump -ni `ifconfig -s | grep $interface | awk ' { print $1 }'` 'tcp[tcpflags] & (tcp-syn|tcp-fin) != 0 '   ; #cmd 7
 elif [ $1 == "77" ] ; then
  ifconfig -s                                                        ; 
 read -p "Interface: " interface                                     ; 
  tcpdump -ni `ifconfig -s | awk ' { print $1 } ' | grep $interface` ; #cmd 77
 elif [ $1 == "swppwr" ] ; then 
	 govner=`cat /sys/devices/system/cpu/cpufreq/policy0/scaling_governor`
	 echo "Govenor = $govner"
	 sleep 3
	 for power in `cat /sys/devices/system/cpu/cpufreq/policy0/scaling_available_governors`
	 do
		 if [ $power != $govner ] ; then
		 echo "Swapping to $power" 
		 cpupower frequency-set -g $power
		 fi
	 done
  #modprobe msr ; wrmsr 0x1FC 17422

 elif [ $1 == "9" ] ; then 
  whois -h whois.radb.net $2 | tee -a  /var/tmp/lastwhois            ; #cmd 9
 elif [ $1 == "10" ] ; then 
	 if [ $2 ] ; then 
  mosh --ssh="ssh -C" $2                                        ; #cmd 10
         else
  read -p "Where ? :" dest
  mosh --ssh="ssh -C -L 3128:172.17.0.1:3128" $dest             ; #cmd 10
	 fi
 elif [ $1 == "swappiness" ] ; then 
  echo "`sysctl vm.swappiness` <= was"                      ;
  echo "`sysctl vm.swappiness=$2` <= now"                   ; #cmd 11
 elif [ $1  == "al" ] ; then
  tail -f /var/log/squid/access.log                         ; #cmd 12


 elif [ $1 == "log" ]  ; then
  IFS=$'\n'
  for line in `cat /var/tmp/log | grep $2 `                 ;  #cmd log
  do
	  if   [ $3 ] ; then
		  echo here
		  read fhdbd
		  exit 0
	  elif [ $2 ] ; then
		  IFS='\:' read -r -a array <<< "$line"   ;
		  echo `date "+%h-%d %H%M"  -d "@${array[0]}"` ${array[1]} 
	  fi
  done
  echo -n "($2) Log: " 
  read log
  echo "$now: $2 $log" >> /var/tmp/log                  ; #cmd log


 elif [ $1 == "nmap" ] ; then
	 nmap -Pn $2 | tee -a /var/tmp/nmap-out.txt       #nmap -Pn


 elif [ $1 == "test" ] ; then
	 start=`date +%s%3N`
	 while true
	 do
		 numero=$((numero+1)) ;
		 if [ $numero == "$2" ] ;  then 
			 break 1
			 fi
	 done
	 
	 lapse=$((`date +%s%3N`-start)) ;
	 echo "Count=$2 $lapse ms" | tee -a /var/tmp/tests
         
 elif [ $1 == "13" ] ; then
	 krn='kernel.perf_event_max_sample_rate'     ; #cmd 13
	 grep $krn `dmesg`                           ;
	 oldrate=`sysctl $krn`                       ; 
	 read -p "oldrate $oldrate new: " newrate    ; 
	 sysctl $krn=$newrate                        ;


 elif [ $1 == "fixdns" ] ; then
	 cat /etc/resolv.conf
	 echo "nameserver 127.0.0.1" > /etc/resolv.conf
	 echo "41.164.49.178 abit.deeco.co.za" >> /etc/hosts
	 echo "197.95.153.5  abit.deeco.co.za" >> /etc/hosts
	 cat /etc/resolv.conf
	 ifconfig ppp0 mtu 900

 elif [ $1 == "editme" ] ; then 
	 vim `which $0`

 elif [ $1 == "logedit" ] ; then
	 vim $logfile

 elif [ $1 == "blks" ] ; then # blks
	 blockdev --getpbsz $2

 elif [ $1 == "blkio" ] ; then #blkio
	 cat /sys/block/sda/queue/scheduler
	 read  sched
	 echo $sched > /sys/block/sda/queue/scheduler #blkio
	 echo $sched > /sys/block/sdb/queue/scheduler
	 echo $sched > /sys/block/sdc/queue/scheduler
	 echo $sched > /sys/block/sdd/queue/scheduler

 elif [ $1 == "blkwrt" ] ; then
	 hdparm -W /dev/$2


 elif [ $1 == "usboff"  ] ; then 
	 echo "Status now"
	 zpool status | grep -e ONLINE -e OFFLINE
	 swapon
	 sleep 5
	 zpool online  home sda6
	 zpool offline home sdb6
	 swapoff /dev/sdb5
	 zpool export data
	 echo "Status now"
	 swapon
	 zpool status | grep -e ONLINE -e OFFLINE

 elif [ $1 == "usbon"   ] ; then
	 echo "Status now"
	 zpool status | grep -e ONLINE -e OFFLINE
	 sleep 5
	 zpool online  home sda6
	 zpool online  home sdb6
	 swapon -p 10 /dev/sdb5
	 swapoff /dev/sda5
	 echo "Status now"
	 zpool status | grep -e ONLINE -e OFFLINE

 elif [ $1 == "usbonly" ] ; then
	 echo "Status now"
	 zpool status | grep -e ONLINE -e OFFLINE
	 sleep 5
	 zpool offline home sda6
	 zpool online  home sdb6
	 #swapon -p 10 /dev/sdb5
	 echo "Status now"
	 zpool status | grep -e ONLINE -e OFFLINE


 elif [ $1 == "docker" ] ; then
  IFS=$'\n'
  for container in `docker ps | awk ' { print $1" " $NF } ' `   ;  #cmd 2
  do
          IFS=' ' read -r -a array <<< "$container" ;
          echo  container: ${array[0]} name:  ${array[1]} ;
          if [ "$2" == "${array[0]}" ] ; then
                echo matched                     ;
                sleep 1 ; clear
                docker exec -it "${array[0]}" bash ;
                exit 0
          fi
  done
  echo "No match, container ? :"
  read  container
  thisone=`docker ps | grep $container | awk '{ print $1 }'`
  docker exec -it $thisone bash              ;  #cmd 2
 

 elif [ $1 == "up" ] ; then
	 nmcli connection
	 read up
	 nmcli connection up --ask $up
	 echo "nameserver 127.0.0.1" > /etc/resolv.conf
 elif [ $1 == "fio" ] ; then
         fio --name=random-writers --ioengine=libaio --iodepth=4 --rw=randwrite --bs=32k --direct=1 --size=64m --numjobs=4
	 
 elif [ $1 == "backlight" ] ; then
	 intel_backlight $2
	 echo -n "new value ? "
	 read bl
	 intel_backlight $bl

 elif [ $1 == "sleep" ] ; then
	 echo -n  mem > /sys/power/state

 elif [ $1 == "setgw" ] ; then
	 gateway=`ip route show default | grep via | awk ' { print $3 } '`
	 export gateway
	 echo "Gateway is $gateway"
	 echo gateway >> /etc/hosts
 elif [ $1 == "backup" ] ; then
	 cp /var/tmp/log /home/daniel/work/bkups/logs/`date +%s`
	 cp /etc/squid/squid.conf $backups/squid/squid.conf-`date +%s`

 else
  grep $1 `which $0` ;
fi